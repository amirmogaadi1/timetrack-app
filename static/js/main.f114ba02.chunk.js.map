{"version":3,"sources":["components/TimeTracker.jsx","utils/uuidv.js","components/Graph.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["TimeTracker","useState","isModalOpen","setIsModalOpen","updateElementId","setUpdateElementId","JSON","parse","localStorage","getItem","data","setData","startDate","setStartDate","endDate","setEndDate","extractDurationString","time","Math","floor","resetFields","Box","sx","width","display","justifyContent","alignItems","flexDirection","Button","variant","color","onClick","Modal","hideBackdrop","open","onClose","aria-labelledby","aria-describedby","position","top","left","transform","bgcolor","border","boxShadow","pt","px","pb","id","LocalizationProvider","dateAdapter","AdapterDateFns","Stack","spacing","DateTimePicker","label","value","onChange","date","renderInput","params","TextField","TimePicker","className","duration","moment","diff","asHours","durationString","_milliseconds","alert","updateIndex","findIndex","e","newData","slice","toISOString","setItem","stringify","handleSave","push","replace","c","crypto","getRandomValues","Uint8Array","toString","handleAdd","scope","map","format","style","marginRight","filter","Graph","dataChart","setDataChart","type","setType","useEffect","reducedData","reduce","a","item","key","workHours","dates","Object","keys","sum","forEach","element","labels","datasets","fill","backgroundColor","borderColor","options","plugins","title","text","responsive","App","React","setValue","handleChange","useCallback","event","newValue","typography","TabContext","borderBottom","TabList","aria-label","Tab","TabPanel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f114ba02.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Stack from '@mui/material/Stack';\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TimePicker from '@mui/lab/TimePicker';\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Modal from '@mui/material/Modal';\nimport moment from \"moment\";\n\nimport {uuidv} from \"../utils/uuidv\";\n\nconst TimeTracker = () => {\n\n    const boxStyle = {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 400,\n        bgcolor: 'background.paper',\n        border: '2px solid #000',\n        boxShadow: 24,\n        pt: 2,\n        px: 4,\n        pb: 3,\n    };\n\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const [updateElementId, setUpdateElementId] =  useState(null);\n\n    // get the actualData from localStorage or initiate it to []\n    const [data, setData] = useState(JSON.parse(localStorage.getItem('data')) || []);\n\n\n    // start & end dates used by the datePicker\n    const [startDate, setStartDate] = useState(null);\n    const [endDate, setEndDate] = useState(null);\n\n    // setEndDate to startDate to force 1 day selection\n    const handleStartDateTimeChange = (date) => {\n        setStartDate(date);\n        setEndDate(date);\n    };\n\n    const handleEndTimeChange = (date) => {\n        setEndDate(date);\n    };\n\n    const extractDurationString = (time) => {\n        return (Math.floor(time / (1000 * 60 * 60)) + \":\" + Math.floor(time / (1000 * 60)) % 60);\n    };\n\n    const resetFields = () => {\n        setStartDate(null);\n        setEndDate(null);\n    }\n    \n    const handleAdd = () => {\n        // check if start & end dates are entered\n        if (!startDate || !endDate) {\n            alert('Start & end dates are required');\n        } else {\n            const duration = moment.duration(moment(endDate).diff(moment(startDate))).asHours();\n            const durationString = extractDurationString(moment.duration(moment.duration(moment(endDate).diff(moment(startDate)))._milliseconds));\n            // check if duration is valid\n            if (duration <= 0) {\n                alert('Start/end date not valid');\n            } else {\n                // add timeFrame to data array\n                    data.push(\n                        {\n                            id: uuidv(),\n                            startDate: moment(startDate).toISOString(),\n                            endDate: moment(endDate).toISOString(),\n                            durationString,\n                            duration,\n                        });\n                    localStorage.setItem('data', JSON.stringify(data));\n                    alert('Time frame added');\n                    setUpdateElementId(null);\n                    resetFields();\n                    setIsModalOpen(false);\n            }\n        }\n    }\n\n    const handleSave = () => {\n        if (!startDate || !endDate) {\n            alert('Start & end dates are required');\n        } else {\n            const duration = moment.duration(moment(endDate).diff(moment(startDate))).asHours();\n            const durationString = extractDurationString(moment.duration(moment.duration(moment(endDate).diff(moment(startDate)))._milliseconds));\n            if (duration <= 0) {\n                alert('Start/end date not valid');\n            } else {\n                const updateIndex = data.findIndex(\n                    (e) => e.id === updateElementId\n                );\n                const newData = [\n                    ...data.slice(0, updateIndex),\n                    {\n                        id: updateElementId,\n                        startDate: moment(startDate).toISOString(),\n                        endDate: moment(endDate).toISOString(),\n                        duration,\n                        durationString,\n                    },\n                    ...data.slice(updateIndex + 1),\n                ];\n                setData(newData);\n                localStorage.setItem('data', JSON.stringify(newData));\n                alert('Time frame updated');\n                setIsModalOpen(false);\n                setUpdateElementId(null);\n                resetFields();\n            }\n        }\n    };\n\n\n    return (\n        <Box sx={{\n                width: '100%',\n                display: 'flex',\n                justifyContent: 'center',\n                alignItems: 'center',\n                flexDirection: 'column'\n            }}\n        >\n            <Button variant=\"outlined\" color=\"success\" onClick={() => setIsModalOpen(true)}>Add Time</Button>\n            <Modal\n                hideBackdrop\n                open={isModalOpen}\n                onClose={() => setIsModalOpen(false)}\n                aria-labelledby=\"child-modal-title\"\n                aria-describedby=\"child-modal-description\"\n            >\n                <Box sx={{ ...boxStyle }}\n                >\n                    <h2 id=\"child-modal-title\">Add Time</h2>\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                        <Stack spacing={3}>\n                        <DateTimePicker\n                            label=\"Start Date&Time\"\n                            value={startDate}\n                            onChange={handleStartDateTimeChange}\n                            renderInput={(params) => <TextField {...params} />}\n                        />\n                        <TimePicker\n                            label=\"End Time\"\n                            value={endDate}\n                            onChange={handleEndTimeChange}\n                            renderInput={(params) => <TextField {...params} />}\n                        />\n                        </Stack>\n                    </LocalizationProvider>\n                    <div className=\"buttons-container\">\n                    {\n                        updateElementId ? (\n                            <Button variant=\"outlined\" color=\"primary\" onClick={() => {\n                                handleSave();\n                            }}>Save</Button>\n                        ) : (\n                            <Button variant=\"outlined\" color=\"primary\" onClick={() => {\n                                handleAdd();\n                            }}>Add</Button>\n                        )\n                    }\n                        <Button onClick={() => {\n                            setIsModalOpen(false);\n                            resetFields();\n                        }}>\n                            Close\n                        </Button>\n                    </div>\n                </Box>\n            </Modal>\n            <table className=\"table\">\n                <thead>\n                <tr>\n                    <th scope=\"col\">Start</th>\n                    <th scope=\"col\">End</th>\n                    <th scope=\"col\">Duration(HH:mm)</th>\n                    <th scope=\"col\"></th>\n                </tr>\n                </thead>\n                <tbody>\n                {\n                    data.map((value) => {\n                        return(\n                            <tr key={value.id}>\n                                <td>{moment(value.startDate).format('DD-MM-YYYY HH:mm')}</td>\n                                <td>{moment(value.endDate).format('HH:mm')}</td>\n                                <td>{value.durationString}</td>\n                                <td>\n                                    <Button  variant=\"outlined\" color=\"primary\" style={{ marginRight: 10}} onClick={() => {\n                                        setUpdateElementId(value.id);\n                                        setStartDate(value.startDate);\n                                        setEndDate(value.endDate);\n                                        setIsModalOpen(true);\n                                    }}>Update</Button>\n                                    <Button  variant=\"outlined\" color=\"error\" onClick={() => {\n                                        setData(data.filter((e) => e.id !== value.id));\n                                        localStorage.setItem('data', JSON.stringify(data.filter((e) => e.id !== value.id)));\n                                    }}>Delete</Button>\n                                </td>\n                            </tr>\n                        )\n                    })\n                }\n                </tbody>\n            </table>\n        </Box>\n    );\n}\n\nexport default TimeTracker;\n","export function uuidv() {\n    return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n        // eslint-disable-next-line no-mixed-operators\n        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n    );\n}\n","import React, {useEffect, useState} from 'react';\nimport {Line} from 'react-chartjs-2';\nimport Box from '@mui/material/Box';\nimport moment from \"moment\";\nimport {Button} from \"@mui/material\";\n\nconst Graph = () => {\n    const [dataChart, setDataChart] = useState({});\n\n    let [data] = useState(JSON.parse(localStorage.getItem('data')) || []);\n\n    const [type, setType] = useState(\"monthly\");\n\n\n    const handleSwitchChart = () => {\n        type === 'monthly' ? setType('daily') : setType('monthly');\n    }\n\n    useEffect(() => {\n            const reducedData = data.reduce( ( a, item ) => {\n                let key = moment(item.startDate).format(type === \"monthly\" ? 'DD.MM.YYYY' : 'MMMM');\n                ( a[ key ] ) ? a[ key ].push( item.duration ): ( a[ key ] = [ item.duration ] );\n                return a;\n            }, {} );\n            let workHours = [];\n            let dates = [];\n            Object.keys(reducedData).map((key) => {\n                let sum = 0;\n                reducedData[key].forEach((element) => {\n                    sum+=element;\n                });\n                workHours.push(sum);\n                dates.push(key);\n                return true;\n            });\n            setDataChart({\n                labels: dates,\n                datasets: [{\n                    label: 'Hours',\n                    data: workHours,\n                    fill: true,\n                    backgroundColor: '#4BC0C033',\n                    borderColor: '#4BC0C0FF',\n                }]\n            });\n        },[data, type]\n    );\n    return(\n        <Box sx={{\n            width: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            flexDirection: 'column'\n        }}>\n            <Box sx={{\n                width: '70%',\n            }}>\n                <Line\n                    data={ dataChart }\n                    options={{\n                        plugins: {\n                            title: {\n                            display: true,\n                            text: 'Time Tracker',\n                            },\n                        },\n                        responsive: true,\n                    }}\n                />\n            </Box>\n            <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleSwitchChart}\n            >\n                Trigger {type}\n            </Button>\n        </Box>\n    );\n};\n\nexport default Graph;\n","import React, {useCallback} from 'react';\nimport Box from '@mui/material/Box';\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\nimport TimeTracker from './components/TimeTracker';\nimport Graph from './components/Graph';\n\nconst App = () => {\n    const [value, setValue] = React.useState('1');\n    const handleChange = useCallback((event, newValue) => {\n        setValue(newValue);\n    }, []);\n    return (\n        <Box sx={{ width: '100%', typography: 'body1' }}>\n            <TabContext value={value}>\n                <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\n                    <TabList onChange={handleChange} aria-label=\"lab API tabs example\">\n                        <Tab label=\"Time Management\" value=\"1\" />\n                        <Tab label=\"Graph\" value=\"2\" />\n                    </TabList>\n                </Box>\n                <TabPanel value=\"1\"><TimeTracker/></TabPanel>\n                <TabPanel value=\"2\"><Graph/></TabPanel>\n            </TabContext>\n        </Box>\n\n    );\n}\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}